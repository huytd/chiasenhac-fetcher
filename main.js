// Generated by CoffeeScript 2.4.1
(function() {
  var axios, cheerio, fetch_album, get, main, open_album, open_download;

  axios = require('axios');

  cheerio = require('cheerio');

  get = async function(url) {
    var resp;
    resp = (await axios.get(url));
    return cheerio.load(resp.data);
  };

  open_album = async function(url) {
    var $, dowloadElements;
    $ = (await get(url));
    dowloadElements = $('#playlist table tr td .gen a img[alt=Download]');
    return dowloadElements.toArray().map(function(e) {
      return ($(e)).parent().attr('href');
    });
  };

  open_download = async function(url) {
    var $, links, maxIdx, sizes;
    $ = (await get(url));
    links = ($('#downloadlink2 b a')).toArray();
    sizes = links.map(function(e) {
      var match;
      match = ($(e)).text().match(/(\d+\.\d+)\ MB/);
      if (match && match.length > 1) {
        return parseFloat(match[1]);
      } else {
        return 0;
      }
    });
    maxIdx = sizes.indexOf(Math.max(...sizes));
    return ($(links[maxIdx])).attr('href');
  };

  fetch_album = async function(album_url) {
    var songs, urls;
    songs = (await open_album(album_url));
    urls = (await Promise.all(songs.map(function(e) {
      return open_download(e);
    })));
    return urls.join("\n");
  };

  main = async function() {
    var album_url, ref, result;
    ref = process.argv.filter(function(p) {
      return p.match(/old\.chiasenhac\.vn/i);
    }), [album_url] = ref;
    result = (await fetch_album(album_url));
    return console.log(result);
  };

  main();

}).call(this);
